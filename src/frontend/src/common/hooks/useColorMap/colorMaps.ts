/*
Add contents of data.js here:
 */

export type IColorMap = 'jet' | 'jet_r' | 'gist_earth' | 'gist_earth_r' | string;

interface IData {
  [key: string]: {
    interpolate: boolean;
    colors: Array<Array<number>>;
  }
}

const data: IData = {
  'jet': {
    'interpolate': true,
    'colors': [[0.0, 0.0, 0.5], [0.0, 0.0, 0.5178], [0.0, 0.0, 0.5357], [0.0, 0.0, 0.5535], [0.0, 0.0, 0.5713], [0.0, 0.0, 0.5891], [0.0, 0.0, 0.607], [0.0, 0.0, 0.6248], [0.0, 0.0, 0.6426], [0.0, 0.0, 0.6604], [0.0, 0.0, 0.6783], [0.0, 0.0, 0.6961], [0.0, 0.0, 0.7139], [0.0, 0.0, 0.7317], [0.0, 0.0, 0.7496], [0.0, 0.0, 0.7674], [0.0, 0.0, 0.7852], [0.0, 0.0, 0.803], [0.0, 0.0, 0.8209], [0.0, 0.0, 0.8387], [0.0, 0.0, 0.8565], [0.0, 0.0, 0.8743], [0.0, 0.0, 0.8922], [0.0, 0.0, 0.91], [0.0, 0.0, 0.9278], [0.0, 0.0, 0.9456], [0.0, 0.0, 0.9635], [0.0, 0.0, 0.9813], [0.0, 0.0, 0.9991], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.002, 1.0], [0.0, 0.0176, 1.0], [0.0, 0.0333, 1.0], [0.0, 0.049, 1.0], [0.0, 0.0647, 1.0], [0.0, 0.0804, 1.0], [0.0, 0.0961, 1.0], [0.0, 0.1118, 1.0], [0.0, 0.1275, 1.0], [0.0, 0.1431, 1.0], [0.0, 0.1588, 1.0], [0.0, 0.1745, 1.0], [0.0, 0.1902, 1.0], [0.0, 0.2059, 1.0], [0.0, 0.2216, 1.0], [0.0, 0.2373, 1.0], [0.0, 0.2529, 1.0], [0.0, 0.2686, 1.0], [0.0, 0.2843, 1.0], [0.0, 0.3, 1.0], [0.0, 0.3157, 1.0], [0.0, 0.3314, 1.0], [0.0, 0.3471, 1.0], [0.0, 0.3627, 1.0], [0.0, 0.3784, 1.0], [0.0, 0.3941, 1.0], [0.0, 0.4098, 1.0], [0.0, 0.4255, 1.0], [0.0, 0.4412, 1.0], [0.0, 0.4569, 1.0], [0.0, 0.4725, 1.0], [0.0, 0.4882, 1.0], [0.0, 0.5039, 1.0], [0.0, 0.5196, 1.0], [0.0, 0.5353, 1.0], [0.0, 0.551, 1.0], [0.0, 0.5667, 1.0], [0.0, 0.5824, 1.0], [0.0, 0.598, 1.0], [0.0, 0.6137, 1.0], [0.0, 0.6294, 1.0], [0.0, 0.6451, 1.0], [0.0, 0.6608, 1.0], [0.0, 0.6765, 1.0], [0.0, 0.6922, 1.0], [0.0, 0.7078, 1.0], [0.0, 0.7235, 1.0], [0.0, 0.7392, 1.0], [0.0, 0.7549, 1.0], [0.0, 0.7706, 1.0], [0.0, 0.7863, 1.0], [0.0, 0.802, 1.0], [0.0, 0.8176, 1.0], [0.0, 0.8333, 1.0], [0.0, 0.849, 1.0], [0.0, 0.8647, 0.9962], [0.0, 0.8804, 0.9836], [0.0, 0.8961, 0.9709], [0.0095, 0.9118, 0.9583], [0.0221, 0.9275, 0.9456], [0.0348, 0.9431, 0.933], [0.0474, 0.9588, 0.9203], [0.0601, 0.9745, 0.9077], [0.0727, 0.9902, 0.895], [0.0854, 1.0, 0.8824], [0.098, 1.0, 0.8697], [0.1107, 1.0, 0.8571], [0.1233, 1.0, 0.8444], [0.136, 1.0, 0.8318], [0.1486, 1.0, 0.8191], [0.1613, 1.0, 0.8065], [0.1739, 1.0, 0.7938], [0.1866, 1.0, 0.7812], [0.1992, 1.0, 0.7685], [0.2119, 1.0, 0.7559], [0.2245, 1.0, 0.7432], [0.2372, 1.0, 0.7306], [0.2498, 1.0, 0.7179], [0.2625, 1.0, 0.7052], [0.2751, 1.0, 0.6926], [0.2878, 1.0, 0.6799], [0.3004, 1.0, 0.6673], [0.3131, 1.0, 0.6546], [0.3257, 1.0, 0.642], [0.3384, 1.0, 0.6293], [0.351, 1.0, 0.6167], [0.3637, 1.0, 0.604], [0.3763, 1.0, 0.5914], [0.389, 1.0, 0.5787], [0.4016, 1.0, 0.5661], [0.4143, 1.0, 0.5534], [0.4269, 1.0, 0.5408], [0.4396, 1.0, 0.5281], [0.4522, 1.0, 0.5155], [0.4649, 1.0, 0.5028], [0.4775, 1.0, 0.4902], [0.4902, 1.0, 0.4775], [0.5028, 1.0, 0.4649], [0.5155, 1.0, 0.4522], [0.5281, 1.0, 0.4396], [0.5408, 1.0, 0.4269], [0.5534, 1.0, 0.4143], [0.5661, 1.0, 0.4016], [0.5787, 1.0, 0.389], [0.5914, 1.0, 0.3763], [0.604, 1.0, 0.3637], [0.6167, 1.0, 0.351], [0.6293, 1.0, 0.3384], [0.642, 1.0, 0.3257], [0.6546, 1.0, 0.3131], [0.6673, 1.0, 0.3004], [0.6799, 1.0, 0.2878], [0.6926, 1.0, 0.2751], [0.7052, 1.0, 0.2625], [0.7179, 1.0, 0.2498], [0.7306, 1.0, 0.2372], [0.7432, 1.0, 0.2245], [0.7559, 1.0, 0.2119], [0.7685, 1.0, 0.1992], [0.7812, 1.0, 0.1866], [0.7938, 1.0, 0.1739], [0.8065, 1.0, 0.1613], [0.8191, 1.0, 0.1486], [0.8318, 1.0, 0.136], [0.8444, 1.0, 0.1233], [0.8571, 1.0, 0.1107], [0.8697, 1.0, 0.098], [0.8824, 1.0, 0.0854], [0.895, 1.0, 0.0727], [0.9077, 1.0, 0.0601], [0.9203, 1.0, 0.0474], [0.933, 1.0, 0.0348], [0.9456, 0.9884, 0.0221], [0.9583, 0.9739, 0.0095], [0.9709, 0.9593, 0.0], [0.9836, 0.9448, 0.0], [0.9962, 0.9303, 0.0], [1.0, 0.9158, 0.0], [1.0, 0.9012, 0.0], [1.0, 0.8867, 0.0], [1.0, 0.8722, 0.0], [1.0, 0.8577, 0.0], [1.0, 0.8431, 0.0], [1.0, 0.8286, 0.0], [1.0, 0.8141, 0.0], [1.0, 0.7996, 0.0], [1.0, 0.785, 0.0], [1.0, 0.7705, 0.0], [1.0, 0.756, 0.0], [1.0, 0.7415, 0.0], [1.0, 0.7269, 0.0], [1.0, 0.7124, 0.0], [1.0, 0.6979, 0.0], [1.0, 0.6834, 0.0], [1.0, 0.6688, 0.0], [1.0, 0.6543, 0.0], [1.0, 0.6398, 0.0], [1.0, 0.6253, 0.0], [1.0, 0.6107, 0.0], [1.0, 0.5962, 0.0], [1.0, 0.5817, 0.0], [1.0, 0.5672, 0.0], [1.0, 0.5527, 0.0], [1.0, 0.5381, 0.0], [1.0, 0.5236, 0.0], [1.0, 0.5091, 0.0], [1.0, 0.4946, 0.0], [1.0, 0.48, 0.0], [1.0, 0.4655, 0.0], [1.0, 0.451, 0.0], [1.0, 0.4365, 0.0], [1.0, 0.4219, 0.0], [1.0, 0.4074, 0.0], [1.0, 0.3929, 0.0], [1.0, 0.3784, 0.0], [1.0, 0.3638, 0.0], [1.0, 0.3493, 0.0], [1.0, 0.3348, 0.0], [1.0, 0.3203, 0.0], [1.0, 0.3057, 0.0], [1.0, 0.2912, 0.0], [1.0, 0.2767, 0.0], [1.0, 0.2622, 0.0], [1.0, 0.2476, 0.0], [1.0, 0.2331, 0.0], [1.0, 0.2186, 0.0], [1.0, 0.2041, 0.0], [1.0, 0.1895, 0.0], [1.0, 0.175, 0.0], [1.0, 0.1605, 0.0], [1.0, 0.146, 0.0], [1.0, 0.1314, 0.0], [1.0, 0.1169, 0.0], [1.0, 0.1024, 0.0], [1.0, 0.0879, 0.0], [0.9991, 0.0733, 0.0], [0.9813, 0.0588, 0.0], [0.9635, 0.0443, 0.0], [0.9456, 0.0298, 0.0], [0.9278, 0.0153, 0.0], [0.91, 0.0007, 0.0], [0.8922, 0.0, 0.0], [0.8743, 0.0, 0.0], [0.8565, 0.0, 0.0], [0.8387, 0.0, 0.0], [0.8209, 0.0, 0.0], [0.803, 0.0, 0.0], [0.7852, 0.0, 0.0], [0.7674, 0.0, 0.0], [0.7496, 0.0, 0.0], [0.7317, 0.0, 0.0], [0.7139, 0.0, 0.0], [0.6961, 0.0, 0.0], [0.6783, 0.0, 0.0], [0.6604, 0.0, 0.0], [0.6426, 0.0, 0.0], [0.6248, 0.0, 0.0], [0.607, 0.0, 0.0], [0.5891, 0.0, 0.0], [0.5713, 0.0, 0.0], [0.5535, 0.0, 0.0], [0.5357, 0.0, 0.0], [0.5178, 0.0, 0.0], [0.5, 0.0, 0.0]],
  },
  'gist_earth': {
    'interpolate': true,
    'colors': [[0.0, 0.0, 0.0], [0.0026, 0.0, 0.1687], [0.0052, 0.0, 0.2217], [0.0078, 0.0, 0.2638], [0.0105, 0.0, 0.3059], [0.0131, 0.0, 0.3481], [0.0157, 0.0, 0.3902], [0.0183, 0.0, 0.4324], [0.0209, 0.0089, 0.4547], [0.0235, 0.0179, 0.4556], [0.0261, 0.0269, 0.4563], [0.0287, 0.036, 0.457], [0.0314, 0.045, 0.4577], [0.034, 0.054, 0.4584], [0.0366, 0.063, 0.4592], [0.0392, 0.072, 0.4599], [0.0418, 0.0811, 0.4606], [0.0444, 0.0901, 0.4613], [0.047, 0.0991, 0.462], [0.0497, 0.1081, 0.4627], [0.0523, 0.1171, 0.4634], [0.0549, 0.1262, 0.4641], [0.0575, 0.1352, 0.4648], [0.0601, 0.1442, 0.4656], [0.0627, 0.1532, 0.4663], [0.0653, 0.1622, 0.467], [0.0679, 0.1713, 0.4677], [0.0706, 0.1803, 0.4684], [0.0732, 0.1893, 0.4691], [0.0758, 0.1975, 0.4698], [0.0784, 0.2056, 0.4705], [0.081, 0.2138, 0.4712], [0.0836, 0.2219, 0.472], [0.0862, 0.2301, 0.4727], [0.0889, 0.2383, 0.4734], [0.0915, 0.2464, 0.4741], [0.0941, 0.2546, 0.4748], [0.0967, 0.2627, 0.4755], [0.0993, 0.2709, 0.4762], [0.1019, 0.279, 0.4769], [0.1045, 0.2872, 0.4776], [0.1072, 0.2954, 0.4784], [0.1098, 0.3035, 0.4791], [0.1124, 0.3108, 0.4798], [0.115, 0.3182, 0.4805], [0.1176, 0.3255, 0.4812], [0.1202, 0.3328, 0.4819], [0.1228, 0.3402, 0.4826], [0.1254, 0.3475, 0.4833], [0.1281, 0.3548, 0.484], [0.1307, 0.3622, 0.4848], [0.1333, 0.3695, 0.4855], [0.1359, 0.3768, 0.4862], [0.1385, 0.3842, 0.4869], [0.1411, 0.3904, 0.4876], [0.1437, 0.3966, 0.4883], [0.1464, 0.4028, 0.489], [0.149, 0.409, 0.4897], [0.1516, 0.4152, 0.4904], [0.1542, 0.4214, 0.4912], [0.1568, 0.4276, 0.4919], [0.1594, 0.4338, 0.4926], [0.162, 0.4399, 0.4933], [0.1646, 0.4461, 0.494], [0.1673, 0.4523, 0.4947], [0.1699, 0.4585, 0.4954], [0.1725, 0.4647, 0.4961], [0.1751, 0.4709, 0.4968], [0.1777, 0.4771, 0.4975], [0.1803, 0.4833, 0.4983], [0.1829, 0.4895, 0.499], [0.1856, 0.4957, 0.4997], [0.1882, 0.5019, 0.5004], [0.19, 0.5042, 0.4957], [0.1919, 0.5065, 0.4909], [0.1937, 0.5087, 0.4861], [0.1956, 0.511, 0.4813], [0.1974, 0.5133, 0.4765], [0.1993, 0.5155, 0.4717], [0.2011, 0.5178, 0.4669], [0.203, 0.52, 0.4621], [0.2048, 0.5223, 0.4573], [0.2067, 0.5245, 0.4525], [0.2085, 0.5268, 0.4477], [0.2104, 0.5291, 0.4429], [0.2122, 0.5313, 0.4381], [0.2141, 0.5336, 0.4333], [0.2159, 0.5358, 0.4285], [0.2178, 0.5381, 0.4237], [0.2196, 0.5404, 0.4189], [0.2215, 0.5426, 0.4141], [0.2233, 0.5449, 0.4093], [0.2252, 0.5471, 0.4045], [0.227, 0.5494, 0.3997], [0.2289, 0.5516, 0.3948], [0.2307, 0.5539, 0.39], [0.2326, 0.5562, 0.3852], [0.2344, 0.5584, 0.3804], [0.2363, 0.5607, 0.3756], [0.2381, 0.5629, 0.3708], [0.24, 0.5652, 0.366], [0.2418, 0.5674, 0.3612], [0.2437, 0.5697, 0.3564], [0.2455, 0.572, 0.3516], [0.2474, 0.5742, 0.3468], [0.2492, 0.5765, 0.342], [0.2511, 0.5787, 0.3372], [0.2529, 0.581, 0.3324], [0.2548, 0.5832, 0.3276], [0.2566, 0.5855, 0.3228], [0.2585, 0.5878, 0.318], [0.2603, 0.59, 0.3132], [0.2622, 0.5923, 0.3084], [0.264, 0.5945, 0.3036], [0.2659, 0.5968, 0.2988], [0.2677, 0.599, 0.294], [0.2696, 0.6013, 0.2892], [0.2715, 0.6036, 0.2844], [0.2802, 0.6058, 0.2796], [0.2889, 0.6081, 0.2748], [0.2976, 0.6103, 0.2771], [0.3063, 0.6126, 0.2794], [0.315, 0.6148, 0.2816], [0.3238, 0.6171, 0.2839], [0.3325, 0.6194, 0.2862], [0.3412, 0.6216, 0.2885], [0.3499, 0.6239, 0.2908], [0.3586, 0.6261, 0.2931], [0.3673, 0.6284, 0.2954], [0.3761, 0.6307, 0.2976], [0.3848, 0.6329, 0.2999], [0.3935, 0.6352, 0.3022], [0.4022, 0.6374, 0.3045], [0.4109, 0.6397, 0.3068], [0.4196, 0.6414, 0.3091], [0.4284, 0.6431, 0.3114], [0.4371, 0.6448, 0.3136], [0.4458, 0.6466, 0.3159], [0.4545, 0.6483, 0.3182], [0.4632, 0.65, 0.3205], [0.4719, 0.6517, 0.3217], [0.4784, 0.6535, 0.323], [0.4849, 0.6552, 0.3242], [0.4913, 0.6569, 0.3255], [0.4978, 0.6586, 0.3267], [0.5043, 0.6603, 0.3279], [0.5107, 0.6621, 0.3292], [0.5172, 0.6638, 0.3304], [0.5237, 0.6655, 0.3317], [0.5301, 0.6672, 0.3329], [0.5366, 0.6689, 0.3341], [0.5431, 0.6707, 0.3354], [0.5495, 0.6724, 0.3366], [0.556, 0.6741, 0.3379], [0.5625, 0.6758, 0.3391], [0.5689, 0.6775, 0.3403], [0.5754, 0.6793, 0.3416], [0.5819, 0.681, 0.3428], [0.5883, 0.6827, 0.344], [0.5948, 0.6844, 0.3453], [0.6013, 0.6861, 0.3465], [0.6077, 0.6879, 0.3478], [0.6142, 0.6896, 0.349], [0.6207, 0.6913, 0.3502], [0.6271, 0.693, 0.3515], [0.6336, 0.6947, 0.3527], [0.6401, 0.6965, 0.354], [0.6465, 0.6982, 0.3552], [0.653, 0.6999, 0.3564], [0.6595, 0.7016, 0.3577], [0.6659, 0.7034, 0.3589], [0.6724, 0.7051, 0.3602], [0.6789, 0.7068, 0.3614], [0.6853, 0.7085, 0.3626], [0.6918, 0.7102, 0.3639], [0.6983, 0.712, 0.3651], [0.7047, 0.7137, 0.3664], [0.7112, 0.7154, 0.3676], [0.7176, 0.7171, 0.3688], [0.7193, 0.7137, 0.3701], [0.7209, 0.7103, 0.3713], [0.7225, 0.7069, 0.3726], [0.7242, 0.7035, 0.3738], [0.7258, 0.7001, 0.375], [0.7275, 0.6967, 0.3763], [0.7291, 0.6934, 0.3775], [0.7307, 0.69, 0.3788], [0.7324, 0.6866, 0.38], [0.734, 0.6832, 0.3812], [0.7356, 0.6798, 0.3825], [0.7373, 0.6764, 0.3837], [0.7389, 0.673, 0.3849], [0.7406, 0.6697, 0.3862], [0.7422, 0.6663, 0.3874], [0.7438, 0.6629, 0.3887], [0.7455, 0.6595, 0.3899], [0.7471, 0.6561, 0.3911], [0.7488, 0.6527, 0.3924], [0.7504, 0.6493, 0.3936], [0.752, 0.6459, 0.3949], [0.7537, 0.6426, 0.3961], [0.7553, 0.6392, 0.4057], [0.7597, 0.6413, 0.4153], [0.7641, 0.643, 0.425], [0.7685, 0.6447, 0.4346], [0.7729, 0.6464, 0.4442], [0.7773, 0.6481, 0.4538], [0.7817, 0.6515, 0.4634], [0.786, 0.6549, 0.473], [0.7904, 0.6583, 0.4826], [0.7948, 0.6617, 0.4922], [0.7992, 0.6651, 0.5018], [0.8036, 0.6685, 0.5114], [0.808, 0.6719, 0.521], [0.8124, 0.6753, 0.5306], [0.8167, 0.6787, 0.5402], [0.8211, 0.6821, 0.5499], [0.8255, 0.6855, 0.5595], [0.8299, 0.6889, 0.5691], [0.8343, 0.6923, 0.5787], [0.8387, 0.6957, 0.5883], [0.8431, 0.6991, 0.5979], [0.8475, 0.7047, 0.6075], [0.8518, 0.7103, 0.6171], [0.8562, 0.7159, 0.6267], [0.8606, 0.7215, 0.6363], [0.865, 0.7269, 0.6459], [0.8694, 0.7323, 0.6555], [0.8738, 0.7377, 0.6652], [0.8782, 0.7431, 0.677], [0.8825, 0.7507, 0.6888], [0.8869, 0.7584, 0.7006], [0.8913, 0.7661, 0.7124], [0.8957, 0.7738, 0.7243], [0.9001, 0.7814, 0.7361], [0.9045, 0.7891, 0.7479], [0.9089, 0.7968, 0.7597], [0.9132, 0.8044, 0.7715], [0.9176, 0.8121, 0.7834], [0.922, 0.8198, 0.7952], [0.9264, 0.8275, 0.807], [0.9308, 0.8364, 0.8188], [0.9352, 0.8454, 0.8306], [0.9396, 0.8544, 0.8425], [0.944, 0.8634, 0.8543], [0.9483, 0.8725, 0.8661], [0.9527, 0.8816, 0.8779], [0.9571, 0.8931, 0.8897], [0.9615, 0.9045, 0.9016], [0.9659, 0.916, 0.9134], [0.9703, 0.9274, 0.9252], [0.9747, 0.9389, 0.937], [0.979, 0.9503, 0.9488], [0.9834, 0.9618, 0.9607], [0.9878, 0.9732, 0.9725], [0.9922, 0.9843, 0.9843]],
  },
};


const interpolated = (x: number, colors: number[][]): [number, number, number] => {
  let lo = Math.floor(x * (colors.length - 1));
  let hi = Math.ceil(x * (colors.length - 1));
  let r = Math.round((colors[lo][0] + colors[hi][0]) / 2 * 255);
  let g = Math.round((colors[lo][1] + colors[hi][1]) / 2 * 255);
  let b = Math.round((colors[lo][2] + colors[hi][2]) / 2 * 255);
  return [r, g, b];
};

const qualitative = (x: number, colors: number[][]): [number, number, number] => {
  let idx = 0;
  while (x > (idx + 1) / (colors.length)) {
    idx++;
  }
  let r = Math.round(colors[idx][0] * 255);
  let g = Math.round(colors[idx][1] * 255);
  let b = Math.round(colors[idx][2] * 255);
  return [r, g, b];
};

const evaluateCMap = (x: number, name: IColorMap, reverse: boolean): [number, number, number] => {
  /**
   * Evaluate colormap `name` at some value `x`.
   * @param {number} x - The value (between 0 and 1) at which to evaluate the colormap.
   * @param {string} name - The name of the colormap (see matplotlib documentation).
   * @reverse {boolean} reverse - Whether or not to reverse the colormap.
   * @return {list} - A 3-tuple (R, G, B) containing the color assigned to `x`.
   */

  // Ensure that the value of `x` is valid (i.e., 0 <= x <= 1)
  if (!(0 <= x && 1 >= x)) {
    throw new Error('Illegal value for x! Must be in [0, 1].');
  }

  // Ensure that `name` is a valid colormap
  if (!(name in data)) {
    throw new Error(`Colormap ${name} not found.`);
  }

  // We can get the reverse colormap by evaluating colormap(1-x)
  if (reverse) {
    x = 1 - x;
  }

  // Get the colors and whether we need to interpolate
  const colors = data[name].colors;
  const interpolate = data[name].interpolate;

  if (interpolate) {
    return interpolated(x, colors);
  }

  return qualitative(x, colors);
};


const partial = (name: IColorMap): ((x: number) => [number, number, number]) => {
  if (name.endsWith('_r')) {
    return function (x: number) {
      return evaluateCMap(x, name.substring(0, name.length - 2), true);
    };
  }

  return function (x: number) {
    return evaluateCMap(x, name, false);
  };
};

const getColorScale = (name: IColorMap) => {
  return partial(name);
};

export default getColorScale;
