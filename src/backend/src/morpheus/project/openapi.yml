openapi: 3.1.0
info:
  title: INOWAS API - Project Module
  version: 2.0.0
paths:
  /projects:
    get:
      operationId: readProjects
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: "Search for projects by name, description or tags."
          required: false
        - in: query
          name: public
          schema:
            type: boolean
          required: false
        - in: query
          name: user_id
          schema:
            type: string
          description: "The id of the user."
          required: false
        - in: query
          name: page
          schema:
            type: integer
          description: "The page number."
          required: false
        - in: query
          name: page_size
          schema:
            type: integer
          description: "The page size."
          required: false
      tags:
        - Project
      summary: Read list of projects with search parameters
      description: Read list of projects with search parameters
      responses:
        200:
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectSummary'
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found

  /projects/messagebox:
    post:
      operationId: sendMessage
      tags:
        - Project
      summary: The command endpoint to send a command to the project module
      description: The command endpoint to send a command to the project module
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: './application/write/Asset/schema.yml#/definitions/AssetCommands'
                - $ref: './application/write/Model/schema.yml#/definitions/ModelCommands'
                - $ref: './application/write/Project/schema.yml#/definitions/ProjectCommands'

      responses:
        201:
          description: Model model was successfully created
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal Server Error

  /projects/{project_id}/model:
    get:
      tags:
        - Project
      summary: Read the model of a project
      description: Read the model of a project
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        200:
          description: Model of the project
          content:
            application/json:
              schema:
                type: object
                properties:
                  model_id:
                    type: string
                    description: "The id of the model."
                    example: "5f1b0b9e-0b0b-4b0b-8b0b-0b0b0b0b0b0b"
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found

  /projects/{project_id}/model/spatial-discretization:
    get:
      tags:
        - Model
      summary: Read the spatial discretization of a model
      description: Read the spatial discretization of a model
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        200:
          description: Spatial discretization of the model
          content:
            application/json:
              schema:
                type: object
                # todo: add spatial discretization schema
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found

  /projects/{project_id}/model/spatial-discretization/geometry:
    get:
      tags:
        - Project
        - Model
      summary: Read the geometry of the spatial discretization
      description: Read the geometry of the spatial discretization
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        200:
          description: Geometry of the spatial discretization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polygon'
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found

  /projects/{project_id}/model/spatial-discretization/grid:
    get:
      tags:
        - Project
        - Model
      summary: Read the grid of the spatial discretization
      description: Read the grid of the spatial discretization
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        200:
          description: Grid of the spatial discretization
          content:
            application/json:
              schema:
                type: object
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found

  /projects/{project_id}/model/time-discretization:
    get:
      tags:
        - Project
        - Model
      summary: Read the time discretization of a model
      description: Read the time discretization of a model
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        200:
          description: Time discretization of the model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchTimeDiscretizationResponse'
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found

  /projects/{project_id}/model/layers:
    get:
      tags:
        - Project
        - Model
      summary: Read the layers of a model
      description: Read the layers of a model
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        200:
          description: Layers of the model
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found

  /projects/{project_id}/model/boundaries:
    get:
      tags:
        - Project
        - Model
      summary: Read the boundaries of a model
      description: Read the boundaries of a model
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        200:
          description: boundaries of the model
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found

  /projects/{project_id}/preview_image:
    get:
      tags:
        - Project
      summary: Get the preview image for a project
      description: Get the preview image for a project
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        200:
          description: The preview image
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Project
      summary: Upload a preview image for a project
      description: Upload a preview image for a project
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { }
              required:
                - file
            encoding:
              file:
                contentType: 'image/jpeg, image/png'
      responses:
        204:
          description: Preview image was successfully uploaded
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        413:
          $ref: '#/components/responses/UploadedFileTooLarge'
        415:
          $ref: '#/components/responses/UnsupportedMediaType'
        422:
          $ref: '#/components/responses/UnprocessableEntity'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Project
      summary: Delete the preview image for a project
      description: Delete the preview image for a project
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        204:
          description: Preview image was successfully deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /projects/{project_id}/permissions:
    get:
      tags:
        - Project
      summary: Read the permissions of a project
      description: Read the permissions of a project
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        200:
          description: Permissions of the project
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_owner:
                    type: boolean
                    description: "A flag to indicate if the user is the owner of the project."
                    example: true
                  can_manage:
                    type: boolean
                    description: "A flag to indicate if the user can manage the project."
                    example: true
                  can_edit:
                    type: boolean
                    description: "A flag to indicate if the user can read the project."
                    example: true
                  can_read:
                    type: boolean
                    description: "A flag to indicate if the user can read the project."
                    example: true
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found

  /projects/{project_id}/assets:
    get:
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/FilterAssetType'
        - $ref: '#/components/parameters/FilterAssetFileName'
        - $ref: '#/components/parameters/FilterAssetDescription'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
      tags:
        - Project
      summary: Read optionally filtered and optionally paginated list of assets for a project
      description: Read list of assets for a project. You can provide filters for asset type, file name and description. Pagination is supported if you provide page and page_size.
      responses:
        200:
          description: List of assets
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationInfo'
                  - type: object
                    properties:
                      assets:
                        type: array
                        items:
                          $ref: '#/components/schemas/Asset'
                    required:
                      - assets
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Project
      summary: Upload a new asset for a project
      description: Upload a new asset for a project
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { }
                description:
                  type: string
              required:
                - file
            encoding:
              file:
                contentType: 'image/tiff, application/zip'
      responses:
        201:
          description: Asset was successfully uploaded
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        413:
          $ref: '#/components/responses/UploadedFileTooLarge'
        415:
          $ref: '#/components/responses/UnsupportedMediaType'
        422:
          $ref: '#/components/responses/UnprocessableEntity'
        500:
          $ref: '#/components/responses/InternalServerError'

  /projects/{project_id}/assets/{asset_id}:
    get:
      tags:
        - Project
      summary: Show info about the asset
      description: Show info about the asset
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/AssetId'
      responses:
        200:
          description: The asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Project
      summary: Delete the asset
      description: Delete the asset
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/AssetId'
      responses:
        204:
          description: Asset was successfully deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /projects/{project_id}/assets/{asset_id}/file:
    get:
      tags:
        - Project
      summary: Download the asset
      description: Download the asset
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/AssetId'
      responses:
        200:
          description: The asset file
          content:
            image/tiff:
              schema:
                type: string
                format: binary
            application/zip:
              schema:
                type: string
                format: binary
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /projects/{project_id}/assets/{asset_id}/data:
    get:
      tags:
        - Project
      summary: Get the data for an asset
      description: Get the data for an asset
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/AssetId'
      responses:
        200:
          description: The asset data
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/GeoTiffData'
                  - $ref: '#/components/schemas/ShapefileData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'

components:
  parameters:
    ProjectId:
      name: project_id
      in: path
      description: "The id of a project."
      required: true
      schema:
        type: string
        example: "5f1b0b9e-0b0b-4b0b-8b0b-0b0b0b0b0b0b"
    AssetId:
      name: asset_id
      in: path
      description: "The id of an asset."
      required: true
      schema:
        type: string
        example: "0e2c2369-1955-4867-9b24-60274b0a8f33"
    FilterAssetType:
      name: asset_type
      in: query
      description: "Filter by asset type"
      required: false
      schema:
        $ref: '#/components/schemas/AssetType'
    FilterAssetFileName:
      name: file_name
      in: query
      description: "Filter by file name"
      required: false
      schema:
        type: string
    FilterAssetDescription:
      name: description
      in: query
      description: "Filter by description"
      required: false
      schema:
        type: string
    PaginationPage:
      name: page
      in: query
      description: "Current page for pagination"
      required: false
      schema:
        type: integer
        minimum: 1
    PaginationPageSize:
      name: page_size
      in: query
      description: "Number of items per page for pagination"
      required: false
      schema:
        type: integer
        minimum: 1
  schemas:
    FetchTimeDiscretizationResponse:
      $ref: '#/components/schemas/TimeDiscretization'

    ProjectId:
      type: string
      description: "The id of a project."
      example: "5f1b0b9e-0b0b-4b0b-8b0b-0b0b0b0b0b0b"

    TimeDiscretization:
      type: object
      description: "The time discretization of a model or scenario."
      properties:
        start_date_time:
          type: string
          format: date-time
          description: "The start date time of the model."
          example: "2020-01-01T00:00:00Z"
        end_date_time:
          type: string
          format: date-time
          description: "The end date time of the model."
          example: "2020-12-31T00:00:00Z"
        stress_periods:
          type: array
          description: "The stress periods of the model."
          items:
            type: object
            properties:
              start_date_time:
                type: string
                format: date-time
                description: "The start date time of the stress period."
                example: "2020-01-01T00:00:00Z"
              number_of_time_steps:
                type: number
                description: "The time step size of the stress period."
                example: 1
              time_step_multiplier:
                type: number
                description: "The time step multiplier of the stress period."
                example: 1
              steady_state:
                type: boolean
                description: "A flag to indicate if the stress period is steady state."
                example: false
          example:
            - start_date_time: "2020-01-01T00:00:00Z"
              number_of_time_steps: 1
              time_step_multiplier: 1
            - start_date_time: "2020-02-01T00:00:00Z"
              number_of_time_steps: 1
              time_step_multiplier: 1

    ProjectSummary:
      type: object
      description: "A project."
      properties:
        project_id:
          type: string
          description: "The id of the project."
          example: "5f1b0b9e-0b0b-4b0b-8b0b-0b0b0b0b0b0b"
        name:
          type: string
          description: "The name of the project."
          example: "My first project"
        description:
          type: string
          description: "The description of the project."
          example: "This is my first project"
        tags:
          type: array
          description: "The tags of the project."
          items:
            type: string
          example: [ "tag1", "tag2" ]
        owner_id:
          type: string
          description: "The id of the owner of the project."
          example: "5f1b0b9e-0b0b-4b0b-8b0b-0b0b0b0b0b0b"
        is_public:
          type: boolean
          description: "A flag to indicate if the project is public."
          example: false
        created_at:
          type: string
          format: date-time
          description: "The creation date time of the project."
          example: "2020-01-01T00:00:00Z"

    LineString:
      type: object
      description: "The geometry of the feature."
      properties:
        type:
          type: string
          enum: [ "LineString" ]
          example: "LineString"
        coordinates:
          type: array
          description: "The coordinates of the geometry."
          example: [ [ 13.922514437551428, 50.964720483303836 ], [ 13.925250781947113, 50.965228748412386 ] ]
          items:
            type: array
            items:
              type: number
              minItems: 2
              maxItems: 2
      required:
        - type
        - coordinates

    Point:
      type: object
      description: "The geometry of the feature."
      properties:
        type:
          type: string
          enum: [ "Point" ]
          example: "Point"
        coordinates:
          type: array
          description: "The coordinates of the geometry."
          example: [ 13.922514437551428, 50.964720483303836 ]
          items:
            type: number
            minItems: 2
            maxItems: 2

      required:
        - type
        - coordinates

    Polygon:
      type: object
      description: "The geometry of the feature."
      properties:
        type:
          type: string
          enum: [ "Polygon" ]
          example: "Polygon"
        coordinates:
          type: array
          description: "The coordinates of the geometry."
          example: [ [
            [ 13.922514437551428, 50.964720483303836 ],
            [ 13.925250781947113, 50.965228748412386 ],
            [ 13.925036413951403, 50.96623732041704 ],
            [ 13.92222441026388, 50.96609040370362 ],
            [ 13.922514437551428, 50.964720483303836 ]
          ] ]
          items:
            type: array
            items:
              type: array
              items:
                type: number
                minItems: 2
                maxItems: 2
      required:
        - type
        - coordinates


    Asset:
      type: object
      description: "A project asset"
      properties:
        asset_id:
          $ref: '#/components/schemas/AssetId'
        asset_type:
          $ref: '#/components/schemas/AssetType'
        file:
          $ref: '#/components/schemas/File'
        description:
          $ref: '#/components/schemas/AssetDescription'
        metadata:
          $ref: '#/components/schemas/AssetMetadata'
      required:
        - asset_id
        - asset_type
        - file
        - description
        - metadata
    AssetId:
      type: string
      description: "The id of an asset"
      example: "0e2c2369-1955-4867-9b24-60274b0a8f33"
    AssetType:
      type: string
      enum:
        - "geo_tiff"
        - "shapefile"
      example: "geo_tiff"
    AssetDescription:
      type: string
      nullable: true
      description: "The description of the asset"
      example: "This asset contains recharge data for the model"
    AssetMetadata:
      oneOf:
        - $ref: '#/components/schemas/GeoTiffMetadata'
        - $ref: '#/components/schemas/ShapefileMetadata'
    ShapefileMetadata:
      type: object
      description: "Metadata of a shapefile"
      properties:
        geometry_type:
          description: "The geometry type"
          type: string
          enum:
            - "Point"
            - "LineString"
            - "Polygon"
          example: "Polygon"
        n_geometries:
          description: "The number of geometries"
          type: integer
          example: 10
        wgs_84_bounding_box:
          $ref: '#/components/schemas/Wgs84BoundingBox'
    GeoTiffMetadata:
      type: object
      description: "Metadata of a GeoTIFF"
      properties:
        n_band:
          description: "The number of bands"
          type: integer
          example: 1
        n_row:
          description: "The number of rows"
          type: integer
          example: 100
        n_col:
          description: "The number of columns"
          type: integer
          example: 100
        wgs_84_bounding_box:
          $ref: '#/components/schemas/Wgs84BoundingBox'
    Wgs84BoundingBox:
      type: object
      description: "Bounding box in WGS 84 coordinates"
      properties:
        min_x:
          type: number
          example: 13.922514437551428
        min_y:
          type: number
          example: 50.964720483303836
        max_x:
          type: number
          example: 13.925250781947113
        max_y:
          type: number
          example: 50.965228748412386
    File:
      type: object
      properties:
        file_name:
          $ref: '#/components/schemas/FileName'
        size_in_bytes:
          type: integer
          description: "The size of the file in bytes"
          example: 1024
        mime_type:
          type: string
          description: "The mime type of the file"
          example: "image/tiff"
      required:
        - file_name
        - size_in_bytes
        - mime_type
    FileName:
      type: string
      description: "The name of the file"
      example: "recharge.tif"
    PaginationInfo:
      type: object
      properties:
        total:
          description: "The total number of items"
          type: integer
          example: 17
        page:
          description: "The current page"
          type: integer
          example: 1
        page_size:
          description: "The number of items per page"
          type: integer
          example: 10
        number_of_pages:
          description: "The total number of pages"
          type: integer
          example: 2
    ShapefileData:
      type: object
      description: "Data contained in a shapefile"
      properties:
        geo_json:
          type: object
          description: "The GeoJSON representation"
          additionalProperties: { }
      required:
        - geo_json
    GeoTiffData:
      allOf:
        - $ref: '#/components/schemas/GeoTiffMetadata'
        - type: object
          description: "Data contained in a GeoTIFF"
          properties:
            wgs_84_coords:
              type: object
              description: "The coordinates in WGS 84 for all bands"
              additionalProperties: { }

  responses:
    UnauthorizedError:
      description: "The request lacks valid authentication"

    ForbiddenError:
      description: "Missing or insufficient permissions to perform the request"

    NotFoundError:
      description: "The requested resource could not be found"

    UnprocessableEntity:
      description: "The request body was not well formed or the content was invalid"

    UploadedFileTooLarge:
      description: "The uploaded file is too large"

    UnsupportedMediaType:
      description: "The media type of the request is not supported"

    InternalServerError:
      description: "Internal Server Error"
