version: "3.8"
services:
  traefik:
    image:
      traefik:2.10
    restart: always
    container_name: traefik
    command:
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--api.debug=true"
      - "--ping=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.postgres.address=:5432"
      - "--entrypoints.mongodb.address=:27017"
      - "--entrypoints.rabbitmq.address=:5672"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.file.directory=/etc/traefik"
      - "--providers.file.watch=true"
      - "--global.checkNewVersion=true"
      - "--global.sendAnonymousUsage=false"
      - "--log.filePath=/var/log/traefik/traefik.log"
    ports:
      - "80:80"
      - "8080:8080" # for traefik api, dashboard and healthcheck local access
      - "5432:5432" # for postgres local access
      - "27017:27017" # for mongodb local access
      - "5672:5672" # for rabbitmq local access
    healthcheck:
      test: [ "CMD", "traefik", "healthcheck", "--ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - auth
      - backend
      - celery
      - mail
  #  frontend:
  #    build:
  #      context: ${PWD}
  #      dockerfile: frontend/docker/Dockerfile
  #    restart: always
  #    ports:
  #      - "8080:8080"
  backend:
    build:
      context: ${MORPHEUS_PROJECT_ROOT}
      dockerfile: src/backend/docker/flask.Dockerfile
      args:
        - FLASK_USER_ID=${FLASK_USER_ID}
        - FLASK_GROUP_ID=${FLASK_GROUP_ID}
        - DOCKERFILE_BUILD_BASE_STAGE=local_base
        - BACKEND_APP_ROOT_PATH=${BACKEND_APP_ROOT_PATH}
    container_name: ${COMPOSE_PROJECT_NAME}-backend
    depends_on:
      mongodb_backend:
        condition: service_healthy
      celery_worker:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - morpheus_modflow_data:${BACKEND_MORPHEUS_MODFLOW_LOCAL_DATA}:rw
      - ${LOCAL_SENSOR_DATA_MOUNTPOINT}:${BACKEND_MORPHEUS_SENSORS_LOCAL_DATA}
    tmpfs:
      - /tmp:mode=777,size=200m
    restart: always
    user: flask
    read_only: true
    networks:
      - backend
    extra_hosts:
      - identity.inowas.localhost:host-gateway
      - rabbitmq.inowas.localhost:host-gateway
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/healthcheck" ]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-backend-http.entrypoints=web"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-backend-http.rule=Host(`${BACKEND_HOST}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-backend-http.tls=false"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-backend.loadbalancer.server.port=8000"
    profiles:
      - backend
  cron:
    build:
      context: ${MORPHEUS_PROJECT_ROOT}
      dockerfile: src/cron/docker/Dockerfile
    restart: always
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - BACKEND_CONTAINER_NAME=${COMPOSE_PROJECT_NAME}-backend
    volumes:
      #- ./cron/jobs/5min:/etc/periodic/5min:ro
      #- ./cron/jobs/15min:/etc/periodic/15min:ro
      - ./cron/jobs/hourly:/etc/periodic/5min:ro
      #- ./cron/jobs/daily:/etc/periodic/daily:ro
      #- ./cron/jobs/weekly:/etc/periodic/weekly:ro
      #- ./cron/jobs/monthly:/etc/periodic/monthly:ro
      # inject docker socket
      - /var/run/docker.sock:/var/run/docker.sock
    command: crond -f -l 8
    read_only: true
    profiles:
      - backend
  mongodb_backend:
    image: mongo:7.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${BACKEND_MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${BACKEND_MONGO_INITDB_ROOT_PASSWORD}
    env_file:
      - .env
    volumes:
      - mongodb_backend_data:/data/db
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.runCommand('ping').ok", "--quiet" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - backend
    read_only: true
    user: mongodb
    tmpfs:
      - /tmp
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.${COMPOSE_PROJECT_NAME}-mongodb_backend.entrypoints=mongodb"
      - "traefik.tcp.routers.${COMPOSE_PROJECT_NAME}-mongodb_backend.rule=HostSNI(`*`)"
      - "traefik.tcp.services.${COMPOSE_PROJECT_NAME}-mongodb_backend.loadbalancer.server.port=27017"
    profiles:
      - backend
      - backend_db_only
  mailcatcher:
    image: sj26/mailcatcher:latest
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-mailcatcher.entrypoints=web"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-mailcatcher.rule=Host(`mailcatcher.${DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-mailcatcher.tls=false"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-mailcatcher.loadbalancer.server.port=1080"
    networks:
      - mail
    profiles:
      - mailcatcher
  keycloak:
    build:
      context: ${MORPHEUS_PROJECT_ROOT}
      dockerfile: src/keycloak/Dockerfile
      target: development
    environment:
      KC_DB: postgres
      KC_DB_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
      KC_DB_URL: jdbc:postgresql://postgres_keycloak:5432/${KEYCLOAK_POSTGRES_DB}
      KC_DB_USERNAME: ${KEYCLOAK_POSTGRES_USER}
      KC_HOSTNAME_URL: http://${IDENTITY_HOST}
      KC_PROXY: edge
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      QUARKUS_TRANSACTION_MANAGER_ENABLE_RECOVERY: true # https://github.com/keycloak/keycloak/issues/15255
    command:
      start --optimized --import-realm
    networks:
      - auth
      - mail
    depends_on:
      postgres_keycloak:
        condition: service_healthy
    read_only: true
    tmpfs:
      - /tmp
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./keycloak:/opt/keycloak/data/import # for local environment only
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-keycloak-http.entrypoints=web"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-keycloak-http.rule=Host(`${IDENTITY_HOST}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-keycloak-http.tls=false"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-keycloak.loadbalancer.server.port=8080"
    profiles:
      - keycloak
  postgres_keycloak:
    image: postgres:13.12
    environment:
      POSTGRES_USER: ${KEYCLOAK_POSTGRES_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
      POSTGRES_DB: ${KEYCLOAK_POSTGRES_DB}
    volumes:
      - postgres_keycloak_data:/var/lib/postgresql/data
    read_only: true
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${KEYCLOAK_POSTGRES_USER} -d ${KEYCLOAK_POSTGRES_DB}'" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - auth
    tmpfs:
      - /tmp
      - /var/run/postgresql
    profiles:
      - keycloak
  rabbitmq:
    image: rabbitmq:3.12.9-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    read_only: true
    user: rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - backend
      - celery
    hostname:
      ${COMPOSE_PROJECT_NAME}-rabbitmq
    tmpfs:
      - /tmp
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-rabbitmq_management.entrypoints=web"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-rabbitmq_management.rule=Host(`rabbitmq.${DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-rabbitmq_management.tls=false"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-rabbitmq_management.loadbalancer.server.port=15672"
      - "traefik.tcp.routers.${COMPOSE_PROJECT_NAME}-rabbitmq.entrypoints=rabbitmq"
      - "traefik.tcp.routers.${COMPOSE_PROJECT_NAME}-rabbitmq.rule=HostSNI(`*`)"
      - "traefik.tcp.services.${COMPOSE_PROJECT_NAME}-rabbitmq.loadbalancer.server.port=5672"
    profiles:
      - celery
      - celery_broker_and_backend_only
  celery_worker:
    build:
      context: ${MORPHEUS_PROJECT_ROOT}
      dockerfile: src/backend/docker/celery.Dockerfile
      args:
        - CELERY_USER_ID=${CELERY_USER_ID}
        - CELERY_GROUP_ID=${CELERY_GROUP_ID}
        - DOCKERFILE_BUILD_BASE_STAGE=local_base
        - BACKEND_APP_ROOT_PATH=${BACKEND_APP_ROOT_PATH}
    container_name: ${COMPOSE_PROJECT_NAME}-celery_worker
    depends_on:
      mongodb_backend:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - morpheus_modflow_data:${BACKEND_MORPHEUS_MODFLOW_LOCAL_DATA}:rw
      - ${LOCAL_SENSOR_DATA_MOUNTPOINT}:${BACKEND_MORPHEUS_SENSORS_LOCAL_DATA}
    tmpfs:
      - /tmp:mode=777,size=200m
    restart: always
    user: celery
    read_only: true
    networks:
      - backend
      - celery
    extra_hosts:
      - rabbitmq.inowas.localhost:host-gateway
    healthcheck:
      test: [ "CMD", "celery", "-A", "task_queue", "inspect", "ping"]
    profiles:
      - celery

volumes:
  keycloak_data:
    driver: local
  postgres_keycloak_data:
    driver: local
  postgres_backend_data:
    driver: local
  mongodb_backend_data:
    driver: local
  morpheus_modflow_data:
    driver: local
  morpheus_sensor_data:
    driver: local
  rabbitmq_data:
    driver: local
networks:
  auth:
    name: ${COMPOSE_PROJECT_NAME}-auth
  backend:
    name: ${COMPOSE_PROJECT_NAME}-backend
  celery:
    name: ${COMPOSE_PROJECT_NAME}-celery
  mail:
    name: ${COMPOSE_PROJECT_NAME}-mail
