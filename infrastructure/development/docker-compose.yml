version: "3.8"
services:
  traefik:
    image:
      traefik:2.10
    command:
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--api.debug=true"
      - "--ping=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.postgres.address=:5432"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.file.directory=/etc/traefik"
      - "--providers.file.watch=true"
      - "--global.checkNewVersion=true"
      - "--global.sendAnonymousUsage=false"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # for traefik api, dashboard and healthcheck
      - "5432:5432" # for postgres
    healthcheck:
      test: [ "CMD", "traefik", "healthcheck" ]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik:/etc/traefik
      - ./tls_certificates:/etc/tls_certificates
    environment:
      - TLS_KEY_FILE=${TLS_KEY_FILE}
      - TLS_CERT_FILE=${TLS_CERT_FILE}
    networks:
      - auth
      - backend
      - mail
#  frontend:
#    build:
#      context: ${PWD}
#      dockerfile: frontend/docker/Dockerfile
#    restart: always
#    ports:
#      - "8080:8080"
  backend:
    build:
      context: ${PWD}
      dockerfile: src/backend/docker/Dockerfile.development
      args:
        - FLASK_USER_ID=${FLASK_USER_ID}
        - FLASK_GROUP_ID=${FLASK_GROUP_ID}
      target: development
    depends_on:
      mongo-backend:
        condition: service_healthy
    environment:
      DYNACONF_SECRET_KEY: ${SECRET_KEY}
      DYNACONF_MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      DYNACONF_MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      DYNACONF_MONGO_HOST: ${MONGO_HOST}
    volumes:
      - ${PWD}/src/backend:/app
    restart: always
    user: flask
    read_only: true
    command: ["flask", "run", "--host=0.0.0.0", "--port=8000"]
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-backend-http.entrypoints=web"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-backend-http.rule=Host(`${BACKEND_HOST}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-backend-http.middlewares=redirect-to-https@file"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-backend.entrypoints=websecure"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-backend.rule=Host(`${BACKEND_HOST}`)"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-backend.loadbalancer.server.port=8000"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-backend.tls=true"
  mongo-backend:
    image: mongo:5.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - backend
  mailcatcher:
    image: sj26/mailcatcher:latest
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-mailcatcher.entrypoints=web"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-mailcatcher.rule=Host(`mailcatcher.${DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-mailcatcher.tls=false"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-mailcatcher.loadbalancer.server.port=1080"
    networks:
      - mail
  keycloak:
    build:
      context: ${PWD}
      dockerfile: src/keycloak/Dockerfile
      target: development
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_USERNAME: ${POSTGRES_KEYCLOAK_USER}
      KC_DB_PASSWORD: ${POSTGRES_KEYCLOAK_PASSWORD}
      KC_DB_URL: jdbc:postgresql://postgres_keycloak:5432/${POSTGRES_KEYCLOAK_DB}
      KC_PROXY: edge
      KC_HOSTNAME_URL: https://identity.${DOMAIN}
      QUARKUS_TRANSACTION_MANAGER_ENABLE_RECOVERY: true # https://github.com/keycloak/keycloak/issues/15255
    command:
      start --optimized --import-realm
    networks:
      - auth
      - mail
    depends_on:
      postgres_keycloak:
        condition: service_healthy
    read_only: true
    tmpfs:
      - /tmp
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./keycloak:/opt/keycloak/data/import # for development only
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-keycloak-http.entrypoints=web"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-keycloak-http.rule=Host(`identity.${DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-keycloak-http.middlewares=redirect-to-https@file"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-keycloak.entrypoints=websecure"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-keycloak.rule=Host(`identity.${DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-keycloak.tls=true"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-keycloak.loadbalancer.server.port=8080"
  postgres_keycloak:
    image: postgres:13.12
    environment:
      POSTGRES_USER: ${POSTGRES_KEYCLOAK_USER}
      POSTGRES_PASSWORD: ${POSTGRES_KEYCLOAK_PASSWORD}
      POSTGRES_DB: ${POSTGRES_KEYCLOAK_DB}
    volumes:
      - postgres_keycloak_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - auth
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.${COMPOSE_PROJECT_NAME}-postgres_keycloak.entrypoints=postgres"
      - "traefik.tcp.routers.${COMPOSE_PROJECT_NAME}-postgres_keycloak.rule=HostSNI(`*`)"
      - "traefik.tcp.services.${COMPOSE_PROJECT_NAME}-keycloak.loadbalancer.server.port=5432"
volumes:
  keycloak_data:
    driver: local
  postgres_keycloak_data:
    driver: local
  mongo_data:
    driver: local
networks:
  auth:
    name: ${COMPOSE_PROJECT_NAME}-auth
  backend:
    name: ${COMPOSE_PROJECT_NAME}-backend
  mail:
    name: ${COMPOSE_PROJECT_NAME}-mail
